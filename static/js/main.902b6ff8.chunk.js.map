{"version":3,"sources":["components/Nav.js","App.js","abi/abi.js","reportWebVitals.js","index.js"],"names":["Nav","state","account","web3","Web3","givenProvider","eth","net","getNetworkType","getAccounts","accounts","this","setState","loadAccount","React","Component","useStyles","makeStyles","theme","root","margin","spacing","storageContract","Contract","constant","inputs","internalType","name","type","outputs","payable","stateMutability","App","classes","useState","number","setUint","getNumber","setGet","numberSet","t","a","preventDefault","window","ethereum","enable","methods","set","estimateGas","gas","send","from","numberGet","get","call","post","className","TextField","id","label","onChange","target","value","variant","onSubmit","Button","color","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mtBAyBeA,G,mNApBdC,MAAQ,CAAEC,QAAS,I,qLAGXC,EAAO,IAAIC,IAAKA,IAAKC,eAAiB,yB,SACtBF,EAAKG,IAAIC,IAAIC,iB,8BACZL,EAAKG,IAAIG,c,OAA1BC,E,OACNC,KAAKC,SAAS,CAAEV,QAASQ,EAAS,K,gJAIlCC,KAAKE,gB,+BAGL,OACG,2DAC0BF,KAAKV,MAAMC,e,GAhBzBY,IAAMC,Y,oCCKlBC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJ,QAAS,CACPC,OAAQF,EAAMG,QAAQ,SAQtBC,EAAkB,IAHX,IAAIlB,IAAKA,IAAKC,eAGMC,IAAIiB,UCpBR,CACzB,CACIC,UAAU,EACVC,OAAQ,CACN,CACEC,aAAc,UACdC,KAAM,IACNC,KAAM,YAGVD,KAAM,MACNE,QAAS,GACTC,SAAS,EACTC,gBAAiB,aACjBH,KAAM,YAEV,CACIJ,UAAU,EACVC,OAAQ,GACRE,KAAM,MACNE,QAAS,CACP,CACEH,aAAc,UACdC,KAAM,GACNC,KAAM,YAGVE,SAAS,EACTC,gBAAiB,OACjBH,KAAM,aDVU,8CA8DTI,MA3Df,WACE,IAAMC,EAAUjB,IADH,EAEakB,mBAAS,GAFtB,mBAENC,EAFM,KAEEC,EAFF,OAGeF,mBAAS,KAHxB,mBAGNG,EAHM,KAGKC,EAHL,KAKPC,EAAS,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DAChBD,EAAEE,iBADc,SAEOC,OAAOC,SAASC,SAFvB,cAEVnC,EAFU,OAGVR,EAAUQ,EAAS,GAHT,SAIEY,EAAgBwB,QAAQC,IAAIZ,GAAQa,cAJtC,cAIVC,EAJU,iBAKG3B,EAAgBwB,QAAQC,IAAIZ,GAAQe,KAAK,CAC1DC,KAAMjD,EACN+C,QAPc,2DAAH,sDAWTG,EAAS,uCAAG,WAAOZ,GAAP,eAAAC,EAAA,6DAChBD,EAAEE,iBADc,SAEGpB,EAAgBwB,QAAQO,MAAMC,OAFjC,OAEVC,EAFU,OAGhBjB,EAAOiB,GAHS,2CAAH,sDAMf,OACE,sBAAKC,UAAWvB,EAAQd,KAAxB,UACE,cAAC,EAAD,IACA,qBAAKqC,UAAU,OAAf,SACE,sBAAKA,UAAU,OAAf,UACE,cAACC,EAAA,EAAD,CACEC,GAAG,iBACHC,MAAM,oBACNC,SAAU,SAACpB,GAAD,OAAOJ,EAAQI,EAAEqB,OAAOC,QAClCC,QAAQ,aAEV,uBAAMP,UAAU,OAAOQ,SAAUzB,EAAjC,UACE,cAAC0B,EAAA,EAAD,CACEF,QAAQ,YACRG,MAAM,UACNtC,KAAK,SACLkC,MAAM,UAJR,qBAQA,uBACA,cAACG,EAAA,EAAD,CACEF,QAAQ,YACRG,MAAM,YACNC,QAASf,EACTxB,KAAK,SAJP,8BAQCS,cE7DE+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.902b6ff8.chunk.js","sourcesContent":["import React from \"react\";\nimport Web3 from \"web3\";\nimport \"./Nav.css\"\n\nclass Nav extends React.Component {\n state = { account: \"\" };\n\n async loadAccount() {\n   const web3 = new Web3(Web3.givenProvider || \"http://localhost:8080\");\n   const network = await web3.eth.net.getNetworkType();\n   const accounts = await web3.eth.getAccounts();\n   this.setState({ account: accounts[0] });\n }\n\n componentDidMount() {\n   this.loadAccount();\n }\n render() {\n   return (\n      <div>\n       Your connected address: {this.state.account}\n      </div>\n   );\n }\n}\nexport default Nav;","import React, { useState } from \"react\";\nimport { simpleStorage } from \"./abi/abi\";\nimport Web3 from \"web3\";\nimport Nav from \"./components/Nav.js\";\nimport \"./App.css\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n  },\n}));\n\nconst web3 = new Web3(Web3.givenProvider);\n\nconst contractAddress = '0x44De34FA0938A1E327273E70ad694798120f9172';\nconst storageContract = new web3.eth.Contract(simpleStorage, contractAddress);\n\nfunction App() {\n  const classes = useStyles();\n  const [number, setUint] = useState(0);\n  const [getNumber, setGet] = useState(\"0\");\n\n  const numberSet = async (t) => {\n    t.preventDefault();\n    const accounts = await window.ethereum.enable();\n    const account = accounts[0];\n    const gas = await storageContract.methods.set(number).estimateGas();\n    const post = await storageContract.methods.set(number).send({\n      from: account,\n      gas,\n    });\n  };\n\n  const numberGet = async (t) => {\n    t.preventDefault();\n    const post = await storageContract.methods.get().call();\n    setGet(post);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Nav />\n      <div className=\"main\">\n        <div className=\"card\">\n          <TextField\n            id=\"outlined-basic\"\n            label=\"Set your uint256:\"\n            onChange={(t) => setUint(t.target.value)}\n            variant=\"outlined\"\n          />\n          <form className=\"form\" onSubmit={numberSet}>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              type=\"submit\"\n              value=\"Confirm\"\n            >\n              Confirm\n            </Button>\n            <br />\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={numberGet}\n              type=\"button\"\n            >\n              Get your uint256\n            </Button>\n            {getNumber}\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","export const simpleStorage = [\n    {\n        constant: false,\n        inputs: [\n          {\n            internalType: 'uint256',\n            name: 'x',\n            type: 'uint256',\n          },\n        ],\n        name: 'set',\n        outputs: [],\n        payable: false,\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: 'get',\n        outputs: [\n          {\n            internalType: 'uint256',\n            name: '',\n            type: 'uint256',\n          },\n        ],\n        payable: false,\n        stateMutability: 'view',\n        type: 'function',\n    },\n];","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}